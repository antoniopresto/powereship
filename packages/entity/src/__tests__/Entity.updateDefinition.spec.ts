import { createType, Infer } from '@backland/schema';
import { assert, IsExact } from 'conditional-type-checks';

import { setupProductTest } from './setupProductTest';

describe('ProductResolver.edgeType', () => {
  const { getMocks } = setupProductTest();

  test('extend types', async () => {
    const { ProductEntity } = await getMocks();

    const updateExtended = ProductEntity.extendUpdate
      .extendObjectDefinition({
        ext: 'null?',
      })
      .graphType('UpdateExtended');

    const inputExtended = ProductEntity.extendInput
      .extendObjectDefinition({ flufis: '[string]?' })
      .graphType('InputExtended');

    const sut = createType('SUT', {
      object: {
        inputExtended,
        updateExtended,
      },
    });

    type UPEX = ReturnType<typeof sut.parse>['updateExtended']['sku'];
    assert<IsExact<UPEX, string | undefined>>(true);

    type INPEX = ReturnType<typeof sut.parse>['inputExtended']['flufis'];
    assert<IsExact<INPEX, string[] | undefined>>(true);

    const graphql = sut.print();

    expect(graphql).toEqual([
      'type SUT {',
      '  inputExtended: InputExtended!',
      '  updateExtended: UpdateExtended!',
      '}',
      '',
      'type InputExtended {',
      '  sku: String!',
      '  storeId: ID!',
      '  title: String!',
      '  stock: Stock!',
      '  shortDescription: String',
      '  brand: String!',
      '  detailsUrl: String',
      '  alcoholic: Boolean!',
      '  thumbUrl: String',
      '  breadcrumb: [BreadCrumb]',
      '  mapOfImages: [ProductImageMap]',
      '  attributes: InputExtended_attributes',
      '  currentPrice: Float!',
      '  priceFrom: Float',
      '  sellPrice: Float!',
      '  dimensions: Dimensions',
      '  tags: [String]',
      '  slug: String',
      '  mainCategoryId: ID',
      '  categories: [String]!',
      '  spotlight: Boolean',
      '  html: String',
      '  flufis: [String]',
      '}',
      '',
      'type Stock {',
      '  available: Boolean!',
      '  count: Float',
      '  maxCartQty: Float',
      '',
      '  """Should track count"""',
      '  track: Boolean',
      '}',
      '',
      'type BreadCrumb {',
      '  id: ID!',
      '  active: Boolean',
      '  name: String!',
      '  parentId: ID',
      '}',
      '',
      'type ProductImageMap {',
      '  key: String',
      '  kind: String',
      '  allowZoom: Boolean',
      '}',
      '',
      'scalar InputExtended_attributes',
      '',
      'type Dimensions {',
      '  weight: String',
      '  length: String',
      '  height: String',
      '  width: String',
      '}',
      '',
      'type UpdateExtended {',
      '  sku: String',
      '  storeId: ID',
      '  title: String',
      '  stock: UpdateExtended_stock',
      '  shortDescription: String',
      '  brand: String',
      '  detailsUrl: String',
      '  alcoholic: Boolean',
      '  thumbUrl: String',
      '  breadcrumb: [UpdateExtended_breadcrumb]',
      '  mapOfImages: [UpdateExtended_mapOfImages]',
      '  attributes: UpdateExtended_attributes',
      '  currentPrice: Float',
      '  priceFrom: Float',
      '  sellPrice: Float',
      '  dimensions: UpdateExtended_dimensions',
      '  tags: [String]',
      '  slug: String',
      '  mainCategoryId: ID',
      '  categories: [String]',
      '  spotlight: Boolean',
      '  html: String',
      '  ext: Null',
      '}',
      '',
      'type UpdateExtended_stock {',
      '  available: Boolean!',
      '  count: Float',
      '  maxCartQty: Float',
      '',
      '  """Should track count"""',
      '  track: Boolean',
      '}',
      '',
      'type UpdateExtended_breadcrumb {',
      '  id: ID!',
      '  active: Boolean',
      '  name: String!',
      '  parentId: ID',
      '}',
      '',
      'type UpdateExtended_mapOfImages {',
      '  key: String',
      '  kind: String',
      '  allowZoom: Boolean',
      '}',
      '',
      'scalar UpdateExtended_attributes',
      '',
      'type UpdateExtended_dimensions {',
      '  weight: String',
      '  length: String',
      '  height: String',
      '  width: String',
      '}',
      '',
      'scalar Null',
      '',
      'input SUTInput {',
      '  inputExtended: InputExtendedInput!',
      '  updateExtended: UpdateExtendedInput!',
      '}',
      '',
      'input InputExtendedInput {',
      '  sku: String!',
      '  storeId: ID!',
      '  title: String!',
      '  stock: StockInput!',
      '  shortDescription: String',
      '  brand: String!',
      '  detailsUrl: String',
      '  alcoholic: Boolean!',
      '  thumbUrl: String',
      '  breadcrumb: [BreadCrumbInput]',
      '  mapOfImages: [ProductImageMapInput]',
      '  attributes: InputExtended_attributes',
      '  currentPrice: Float!',
      '  priceFrom: Float',
      '  sellPrice: Float!',
      '  dimensions: DimensionsInput',
      '  tags: [String]',
      '  slug: String',
      '  mainCategoryId: ID',
      '  categories: [String]!',
      '  spotlight: Boolean',
      '  html: String',
      '  flufis: [String]',
      '}',
      '',
      'input StockInput {',
      '  available: Boolean!',
      '  count: Float',
      '  maxCartQty: Float',
      '',
      '  """Should track count"""',
      '  track: Boolean',
      '}',
      '',
      'input BreadCrumbInput {',
      '  id: ID!',
      '  active: Boolean',
      '  name: String!',
      '  parentId: ID',
      '}',
      '',
      'input ProductImageMapInput {',
      '  key: String',
      '  kind: String',
      '  allowZoom: Boolean',
      '}',
      '',
      'input DimensionsInput {',
      '  weight: String',
      '  length: String',
      '  height: String',
      '  width: String',
      '}',
      '',
      'input UpdateExtendedInput {',
      '  sku: String',
      '  storeId: ID',
      '  title: String',
      '  stock: UpdateExtended_stockInput',
      '  shortDescription: String',
      '  brand: String',
      '  detailsUrl: String',
      '  alcoholic: Boolean',
      '  thumbUrl: String',
      '  breadcrumb: [UpdateExtended_breadcrumbInput]',
      '  mapOfImages: [UpdateExtended_mapOfImagesInput]',
      '  attributes: UpdateExtended_attributes',
      '  currentPrice: Float',
      '  priceFrom: Float',
      '  sellPrice: Float',
      '  dimensions: UpdateExtended_dimensionsInput',
      '  tags: [String]',
      '  slug: String',
      '  mainCategoryId: ID',
      '  categories: [String]',
      '  spotlight: Boolean',
      '  html: String',
      '  ext: Null',
      '}',
      '',
      'input UpdateExtended_stockInput {',
      '  available: Boolean!',
      '  count: Float',
      '  maxCartQty: Float',
      '',
      '  """Should track count"""',
      '  track: Boolean',
      '}',
      '',
      'input UpdateExtended_breadcrumbInput {',
      '  id: ID!',
      '  active: Boolean',
      '  name: String!',
      '  parentId: ID',
      '}',
      '',
      'input UpdateExtended_mapOfImagesInput {',
      '  key: String',
      '  kind: String',
      '  allowZoom: Boolean',
      '}',
      '',
      'input UpdateExtended_dimensionsInput {',
      '  weight: String',
      '  length: String',
      '  height: String',
      '  width: String',
      '}',
    ]);
  });

  test('works', async function () {
    const { ProductEntity, ProductType } = await getMocks();

    const updateDefinition = ProductEntity.extendUpdate.def();

    type UD = Infer<{ object: typeof updateDefinition }>;
    assert<IsExact<UD, Partial<Infer<typeof ProductType>>>>(true);

    expect(
      Object.entries(updateDefinition).map(([key, { optional }]) => [
        key,
        optional,
      ])
    ).toEqual([
      ['sku', true],
      ['storeId', true],
      ['title', true],
      ['stock', true],
      ['shortDescription', true],
      ['brand', true],
      ['detailsUrl', true],
      ['alcoholic', true],
      ['thumbUrl', true],
      ['breadcrumb', true],
      ['mapOfImages', true],
      ['attributes', true],
      ['currentPrice', true],
      ['priceFrom', true],
      ['sellPrice', true],
      ['dimensions', true],
      ['tags', true],
      ['slug', true],
      ['mainCategoryId', true],
      ['categories', true],
      ['spotlight', true],
      ['html', true],
    ]);
  });
});
