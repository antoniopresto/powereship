// import {
//   AnyFunction,
//   ChangeList,
//   entries,
//   getters,
//   isPlainObject,
//   MaybePromise,
//   nonNullValues,
// } from '@swind/utils';
// import { YState } from '../YState';
// import { ToJSON } from '../ymmer';
//
// describe('form', () => {
//   // afterEach();
//
//   test('basic test', () => {
//     const sut = createForm({
//       uniqId: 'teste',
//       fields: {
//         name: {
//           name: 'name',
//           render({ value }) {
//             return value;
//           },
//         },
//       },
//       onSubmit() {},
//     });
//
//     sut.setValue('name', 'antonio');
//
//     const json = sut.durable.toJSON();
//
//     expect(json).toEqual({
//       fields: {
//         name: {
//           changed: 0,
//           extraProps: {},
//           focused: false,
//           show: false,
//           value: 'antonio',
//         },
//       },
//       pristine: true,
//       uniqId: 'teste',
//     });
//   });
// });
//
// export type FieldSpec<Value = any, ExtraProps = any> = {
//   name: string;
//   required?: boolean;
//   onChange?: (
//     value: Value,
//     self: FieldInstance<Value, ExtraProps>
//   ) => MaybePromise<void>;
//   render: null | ((self: FieldInstance<Value, ExtraProps>) => any);
//   initialState?: Partial<FieldState<Value, ExtraProps>>;
//   defaultState?: Partial<FieldState<Value, ExtraProps>>;
// };
//
// export type FieldState<Value, ExtraProps> = {
//   value: Value;
//   extraProps: ExtraProps;
//   error: string | undefined;
//   focused: boolean;
//   changed: number;
//   show: boolean;
// };
//
// export type AsString<T> = Extract<T, string>;
//
// export type _FieldValue<T> = T extends FieldSpec<infer V> ? V : never;
// export type _FieldExtraProps<T> = T extends FieldSpec<any, infer E> ? E : never;
//
// export interface FieldInstance<Value, ExtraProps>
//   extends FieldState<Value, ExtraProps>,
//     Required<FieldSpec> {
//   form: FormInstance;
//   extraProps: ExtraProps;
//   render: (instance: FieldInstance<Value, ExtraProps>) => any;
//   toState(): FieldState<Value, ExtraProps>;
// }
//
// export type FieldsInit = { [K: string]: FieldSpec };
//
// export type FieldInstances<Fields extends FieldsInit> = {
//   [K in keyof Fields]: FieldInstance<unknown, unknown>;
// };
//
// export type FormErrorObject<Field extends string = string> = {
//   field: Field;
//   message: string;
// };
//
// export type SubmitState<Fields extends FieldsInit = FieldsInit> =
//   | {
//       values: PickFormValues<Fields>;
//       errors: null;
//       pristine: boolean;
//       loading: boolean;
//       submissionError: null;
//     }
//   | {
//       values: Partial<PickFormValues<Fields>>;
//       errors: FormErrorObject<AsString<keyof Fields>>[];
//       submissionError: { message: string; [K: string]: any } | null;
//       pristine: boolean;
//       loading: boolean;
//     };
//
// export type FormSpec<Fields extends FieldsInit = FieldsInit> = {
//   fields: Fields;
//   uniqId: string;
//   onSubmit(
//     state: SubmitState<Fields>,
//     self: FormInstance<Fields>
//   ): MaybePromise<any>;
// };
//
// export type PickFormValues<Fields extends FieldsInit = FieldsInit> = {
//   [K in keyof Fields]: Fields[K] extends FieldSpec<infer R> ? R : never;
// };
//
// export type FormState<Fields extends FieldsInit = FieldsInit> = {
//   uniqId: string;
//   fields: {
//     [K in AsString<keyof Fields>]: FieldState<
//       _FieldValue<Fields[K]>,
//       _FieldExtraProps<_FieldExtraProps<Fields[K]>>
//     >;
//   };
//   pristine: boolean;
// };
//
// export type DurableForm<Fields extends FieldsInit> = YState<FormState<Fields>>;
//
// export interface FormInstance<
//   Fields extends FieldsInit = FieldsInit,
//   FieldName extends AsString<keyof Fields> = AsString<keyof Fields>
// > {
//   setValue<F extends FieldName>(field: F, value: _FieldValue<Fields[F]>): this;
//   setFocus(field: FieldName): this;
//   setBlur(field: FieldName): this;
//   setHidden(field: FieldName): this;
//   setVisible(field: FieldName): this;
//   render<F extends FieldName>(field: F): any;
//   submit(): Promise<this>;
//   durable: DurableForm<Fields>;
//   toJSON(): FormState<Fields>;
//   uniqId: string;
//   fields: FieldInstances<Fields>[keyof Fields][];
//   fieldsMap: FieldInstances<Fields>;
//   state: SubmitState<Fields>;
// }
//
// export function createForm<Fields extends FieldsInit>(
//   init: FormSpec<Fields>
// ): FormInstance<Fields> {
//   const { fields: fieldsInit, uniqId, onSubmit } = init;
//
//   const fieldsList: FieldInstance<any, any>[] = [];
//   const fields: FormState['fields'] = {};
//   const fieldEntries = entries(fieldsInit);
//
//   const state: SubmitState<any> = {
//     errors: null,
//     pristine: true,
//     values: {},
//     loading: false,
//     submissionError: null,
//   };
//
//   const fieldsMap: FieldInstances<any> = fieldEntries.reduce(
//     (acc, [key, field]) => {
//       const instance = makeField({
//         getForm() {
//           return form;
//         },
//         field,
//       });
//
//       const _state = instance.toState();
//       fields[key] = _state;
//       fieldsList.push(instance);
//
//       const { value, error } = _state;
//
//       if (value !== undefined) {
//         state.pristine = false;
//         state.values[key] = value;
//       }
//
//       if (error) {
//         const errors = (state.errors || []) as {
//           field: string;
//           message: string;
//         }[];
//         errors.push({ field: key, message: error });
//         state.errors = errors as any;
//       }
//
//       return {
//         ...acc,
//         [key]: instance,
//       };
//     },
//     {}
//   );
//
//   const formDoc: FormState = {
//     fields,
//     pristine: true,
//     uniqId,
//   };
//
//   const durable = new YState(toJSON(formDoc) as FormState, {
//     guid: uniqId,
//   });
//
//   // durable.subscribe('fields.$', (el) => {
//   //   console.log(el);
//   // });
//
//   const form: FormInstance<any> = {
//     durable,
//     uniqId,
//     fields: fieldsList,
//     state,
//     fieldsMap,
//     toJSON() {
//       return durable.toJSON();
//     },
//     render(field) {
//       const self = fieldsMap[field];
//       if (!self) return '';
//       return self?.render(self) ?? '';
//     },
//     setValue(field, value) {
//       durable.update((draft) => {
//         draft.fields[field].value = value;
//       });
//       return form;
//     },
//     setBlur(field) {
//       durable.update((draft) => {
//         draft.fields[field].focused = false;
//       });
//       return form;
//     },
//     setFocus(field) {
//       durable.update((draft) => {
//         draft.fields[field].focused = true;
//       });
//       return form;
//     },
//     setHidden(field) {
//       durable.update((draft) => {
//         draft.fields[field].show = false;
//       });
//       return form;
//     },
//     setVisible(field) {
//       durable.update((draft) => {
//         draft.fields[field].show = true;
//       });
//       return form;
//     },
//     async submit() {
//       try {
//         state.loading = true;
//         onSubmit(state, form);
//         state.errors = null;
//         state.submissionError = null;
//       } catch (e: any) {
//         state.errors = state.errors || ([] as any);
//         state.submissionError = e;
//       } finally {
//         state.loading = false;
//       }
//       return form;
//     },
//   };
//
//   Object.defineProperties(form, {
//     state: {
//       get() {
//         return state;
//       },
//     },
//   });
//
//   return form;
// }
//
// function makeField({
//   field,
//   getForm,
// }: {
//   field: FieldSpec;
//   getForm(): FormInstance;
// }): FieldInstance<any, any> {
//   const {
//     name,
//     initialState = {},
//     defaultState = {},
//     onChange = () => {},
//     render,
//     required = false,
//   } = field;
//
//   nonNullValues({ fieldName: name });
//
//   const {
//     value,
//     changed = 0,
//     error,
//     focused = false,
//     show = false,
//     extraProps = {},
//   } = { ...defaultState, ...initialState };
//
//   const instance: FieldInstance<any, any> = {
//     name,
//     form: undefined as any,
//     value,
//     changed,
//     error,
//     extraProps,
//     focused,
//     show,
//     defaultState,
//     initialState,
//     onChange,
//     render: render || (() => ''),
//     required,
//     toState(): FieldState<any, any> {
//       return getters({
//         value: () => instance.value,
//         error: () => instance.error,
//         show: () => instance.show,
//         focused: () => instance.focused,
//         changed: () => instance.changed,
//         extraProps: () => instance.extraProps,
//       });
//     },
//   };
//
//   Object.defineProperties(instance, {
//     form: {
//       get() {
//         return getForm();
//       },
//     },
//   });
//
//   return instance;
// }
//
// function toJSON<T>(object: T): ToJSON<T> {
//   const result = Object.create(null);
//
//   for (let key in object) {
//     const value = object[key];
//
//     switch (typeof value) {
//       case 'bigint':
//       case 'function':
//       case 'symbol':
//       case 'undefined': {
//         break;
//       }
//       case 'boolean':
//       case 'number':
//       case 'string': {
//         result[key] = value;
//         break;
//       }
//       case 'object': {
//         if (!isPlainObject(value)) break;
//         result[key] = toJSON(value);
//       }
//     }
//   }
//
//   return result;
// }
//
// /*
// export type SetFieldResult<O extends object> = O;
//
// export function setField<O extends object, P extends Paths<O>>(
//   object: O,
//   path: P,
//   value: Exclude<PathType<O, P>, AnyFunction>,
//   patchListener?: PatchListener
// ): SetFieldResult<O>;
//
// export function setField<O extends object>(
//   object: O,
//   partialUpdate: Partial<O>,
//   patchListener?: PatchListener
// ): SetFieldResult<O>;
//
// export function setField<O extends object>(
//   object: O,
//   updater: (draft: Draft<O>) => Promise<void | Draft<O>>,
//   patchListener?: PatchListener
// ): Promise<SetFieldResult<O>>;
//
// export function setField<O extends object>(
//   object: O,
//   updater: (draft: Draft<O>) => void | Draft<O>,
//   patchListener?: PatchListener
// ): SetFieldResult<O>;
//
// export function setField<O extends object, P extends Paths<O>>(
//   object: O,
//   ...args:
//     | [
//         path: P,
//         value: Exclude<PathType<O, P>, AnyFunction>,
//         patchListener?: PatchListener
//       ]
//     | [partialUpdate: Partial<O>, patchListener?: PatchListener]
//     | [
//         updater: (draft: Draft<O>) => Promise<void | Draft<O>>,
//         patchListener?: PatchListener
//       ]
//     | [
//         updater: (draft: Draft<O>) => void | Draft<O>,
//         patchListener?: PatchListener
//       ]
// ): any {
//   const path =
//     typeof args[0] === 'string'
//       ? {
//           path: args[0],
//           value: args[1],
//           listener: args[2],
//         }
//       : undefined;
//
//   const partial =
//     args[0] && typeof args[0] === 'object'
//       ? {
//           partial: args[0],
//           listener: args[1],
//         }
//       : undefined;
//
//   const updater =
//     typeof args[0] === 'function'
//       ? {
//           updater: args[0],
//           listener: args[1],
//         }
//       : undefined;
//
//   if (!path && !partial && !updater) {
//     throw new Error(`Invalid arguments`);
//   }
//
//   const listener = path?.listener || partial?.listener || updater?.listener;
//   return produce((draft: any) => {
//     if (path) {
//       setByPath(draft, path.path, path.value);
//       return;
//     }
//     if (partial) {
//       return { ...draft, ...partial.partial };
//     }
//     if (updater) {
//       return updater.updater(draft);
//     }
//   }, listener);
// }
//  */
